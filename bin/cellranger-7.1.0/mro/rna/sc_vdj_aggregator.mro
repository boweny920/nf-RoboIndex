@include "_cr_aggr_stages.mro"
@include "_cr_vdj_stages.mro"
@include "_vloupe_stages.mro"

filetype json;
filetype vloupe;

stage BUILD_AGGR_WEB_SUMMARY(
    in  json content,
    in  json diversity_chart,
    out json web_summary_data,
    src py   "stages/vdj/build_aggr_web_summary",
)

stage CALCULATE_CLONOTYPE_DIVERSITY(
    in  json per_origin_clonotype_hist,
    out json plotly_diversity_chart,
    src py   "stages/vdj/clonotype_diversity",
)

pipeline SC_VDJ_AGGREGATOR(
    in  VdjAggrInput aggr_input,
    in  map          count_gem_well_map,
    in  string       sample_id,
    in  string       sample_desc,
    out pb           enclone_output,
    out string       receptor,
    out csv          clonotypes,
    out fa           donor_ref_fa,
    out fasta        consensus_fasta,
    out path         vdj_reference_path,
    out csv          filt_ann_csv,
    out csv          consensus_ann_csv,
    out json         web_summary_data,
    out vloupe       vloupe,
)
{
    call PROCESS_VDJ_PROTO(
        libraries          = self.aggr_input.libraries,
        count_gem_well_map = self.count_gem_well_map,
    )

    call SETUP_VDJ_AGGR(
        libraries    = self.aggr_input.libraries,
        gem_well_map = PROCESS_VDJ_PROTO.gem_well_map,
        receptor     = PROCESS_VDJ_PROTO.receptor,
    )

    call RUN_ENCLONE_AGGR(
        contig_ann_json_files = SETUP_VDJ_AGGR.contig_ann_json_files,
        enclone_input_csv     = SETUP_VDJ_AGGR.enclone_input_csv,
        enclone_gem_well_meta = SETUP_VDJ_AGGR.enclone_gem_well_meta,
        vdj_reference_path    = SETUP_VDJ_AGGR.vdj_reference_path,
    )

    call WRITE_CONSENSUS_TXT(
        enclone_output = RUN_ENCLONE_AGGR.enclone_output,
    )

    call WRITE_CLONOTYPE_OUTS(
        receptor       = PROCESS_VDJ_PROTO.receptor,
        enclone_output = RUN_ENCLONE_AGGR.enclone_output,
    )

    call FILL_CLONOTYPE_INFO(
        contig_annotations = SETUP_VDJ_AGGR.combined_ann_json,
        enclone_output     = RUN_ENCLONE_AGGR.enclone_output,
    )

    call WRITE_ANN_CSV(
        all_contig_annotations_json = FILL_CLONOTYPE_INFO.all_contig_annotations_json,
    )

    call WRITE_AGGR_ANN(
        enclone_gem_well_meta = SETUP_VDJ_AGGR.enclone_gem_well_meta,
        annotation_csv        = WRITE_ANN_CSV.filtered_contig_annotations_csv,
    )

    call WRITE_WEB_SUMMARY_JSON(
        libraries             = self.aggr_input.libraries,
        enclone_gem_well_meta = SETUP_VDJ_AGGR.enclone_gem_well_meta,
        enclone_output        = RUN_ENCLONE_AGGR.enclone_output,
        sample_id             = self.sample_id,
        sample_desc           = self.sample_desc,
        clonotypes_csv        = WRITE_CLONOTYPE_OUTS.clonotypes_csv,
        receptor              = PROCESS_VDJ_PROTO.receptor,
        vdj_reference_path    = SETUP_VDJ_AGGR.vdj_reference_path,
    )

    call CALCULATE_CLONOTYPE_DIVERSITY(
        per_origin_clonotype_hist = WRITE_WEB_SUMMARY_JSON.per_origin_hist,
    )

    call BUILD_AGGR_WEB_SUMMARY(
        content         = WRITE_WEB_SUMMARY_JSON.web_summary_content,
        diversity_chart = CALCULATE_CLONOTYPE_DIVERSITY.plotly_diversity_chart,
    )

    call VLOUPE_PREPROCESS(
        pipestance_type              = "SC_VDJ_AGGREGATOR",
        sample_id                    = self.sample_id,
        sample_desc                  = self.sample_desc,
        enclone_output               = RUN_ENCLONE_AGGR.enclone_output,
        disable_vloupe               = false,
        beam_mode                    = null,
        feature_reference            = null,
        feature_barcode_matrix       = null,
        antigen_specificity_scores   = null,
        antigen_specificity_controls = null,
    )

    return (
        enclone_output     = RUN_ENCLONE_AGGR.enclone_output,
        receptor           = PROCESS_VDJ_PROTO.receptor,
        clonotypes         = WRITE_CLONOTYPE_OUTS.clonotypes_csv,
        donor_ref_fa       = RUN_ENCLONE_AGGR.donor_ref_fa,
        consensus_fasta    = WRITE_CONSENSUS_TXT.consensus_fasta,
        vdj_reference_path = SETUP_VDJ_AGGR.vdj_reference_path,
        filt_ann_csv       = WRITE_AGGR_ANN.augmented_annotation_csv,
        consensus_ann_csv  = WRITE_CONSENSUS_TXT.consensus_annotations_csv,
        web_summary_data   = BUILD_AGGR_WEB_SUMMARY.web_summary_data,
        vloupe             = VLOUPE_PREPROCESS.output_for_vloupe,
    )
}
